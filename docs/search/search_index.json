{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"azuread/","text":"Integrate idemeum with Azure AD (B2B) .embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; } How can idemeum help secure O365? idemeum integrates with Azure Active Directory (AAD) directly over SAML and provides the following services: Service Description Passwordless MFA Eliminate passwords when users access your SSO and O365 resources. No enrollment, no user sync, easy and simple. idemeum supports cloud-only as well as hybrid deployment models. How is O365 deployed? O365 and Azure Active Directory (AAD) can be implemented with various deployment models . Deployment model Definition Cloud only identity User account only exists in the Azure AD tenant for your Microsoft 365 subscription. Hybrid identity User account exists in AD DS and a copy is also in the Azure AD tenant for your Microsoft 365 subscription. The user account in Azure AD might also include a hashed version of the already hashed AD DS user account password. For authentication there are several options: password hash synchronization , pass-through authentication , and federation with ADFS . How is idemeum integrated with O365? idemeum can be federated directly with AAD using SAML protocol. When federating directly with Azure AD, idemeum can support cloud only as well as hybrid (password sync and pass-through) models. Integrate idemeum with Azure AD We are going to go through simple three steps to integrate idemeum with your Microsoft identity environment. Request idemeum tenant Configure Azure AD for federation Test user sign-in All additional Microsoft documentation and useful links can be found in footnotes . \u2699\ufe0f 1. Request idemeum tenant As a first step, reach out to idemeum team at support@idemeum.com with the request to provision idemeum tenant. Please, let us know that you will be integrating idemeum with Azure AD. We will need several things from you: Preferred tenant name - we will provision a tenant name for you based on your preferences. The tenant name will be in the form of <your company>.idemeum.com . Company logo - share your company logo with us so that we can display it on every login page request as well as in the application, when users log into your company resources. We will need the image in the png or jpeg format. As a result of tenant provisioning we will share the configuration details with you, so that you can later use them in your Azure AD configuration: $LogOnUrl - SAML LogOn URL. $LogOffUrl - SAML LogOff URL. $SigningCert - signing certificate to establish federation trust. $IssuerUri - URI to identify idemeum in SAML responses. Tip You can always get this and additional information from your SAML metadata XML file. You can access this information by using the following link https://<your tenant name>/api/saml/metadata/idp.xml . Replace [your tenant name] with your actual tenant name that we will provision for you. \ud83e\uddd1\ud83c\udfff\u200d\ud83e\udd1d\u200d\ud83e\uddd1\ud83c\udffc 2. Configure Azure AD for federation After signing up for Office 365, the only domain associated with your account is the onmicrosoft.com subdomain chosen during registration (for example, contoso.onmicrosoft.com ). To allow users to SSO to Azure AD and Office 365, it is recommended to have another domain added to the environment. If you already have such domain added and verified, you can always use that. Make sure you have admin account with another domain Once you configure Azure AD domain to be federated, you will no longer be able to use local login into accounts associated with that domain. Therefore, if something is wrong with the configuration, you might lock yourself out. To prevent that, make sure you have admin account created on other domain (for instance on your onmicrosoft.com domain), so that you can always use that account to log in and revert federation configuration. We will be using PowerShell to configure the Azure AD domain for federation 1 . Launch PowerShell on a Windows machine Install MSOnline PowerShell module if you have not already 1 Install-Module MSOnline Connect to MSOnline service. You will need to authenticate with your Azure AD Portal admin credentials 1 Connect-MsolService You can check your existing domains and their federation settings 1 Get-MsolDomain Check your current domain federation settings. If the current setting is federated , you will need to first convert domain to `managed' setting 1 Get-MsolDomainFederationSettings 1 Set-MsolDomainAuthentication -DomainName < yourdomain > -Authentication managed Now you can configure your domain with federation settings. Take a look at the example below. $Domain - the domain that you are planning to federate with idemeum $BrandName - the name that you will use for federation $LogOnUrl - this is a SAML LogOn URL. We will share this URL with you as part of onboarding. $LogOffUrl - this is a SAML LogOff URL. We will share this URL with you as part of onboarding $SigningCert - signing certificate to establish federation trust. We will share this certificate with you as part of onboarding. $IssuerUri - URI that identifies idemeum as SAML issuer. $Protocol - protocol to use for federation. In our case it is SAML 1 2 3 4 5 6 7 8 9 $Domain = \"idemeumlab.com\" $BrandName = \"idemeum\" $LogOnUrl = \"https://myhospital.idemeum.com/api/saml/sso\" $LogOffUrl = \"https://myhospital.idemeum.com/api/saml/slo\" $SigningCert = \"MIIC9DCCAdygAwIBAgIIPKj+xeu3fLQwDQYJKoZIhvcNAQELBQAwOjEMMAoGA1UEBhMDVVNBMRIwEAYDVQQHEwlQYWxvIEFsdG8xFjAUBgNVBAMMDSouaWRlbWV1bS5jb20wHhcNMjAxMjI5MjMwMjUxWhcNMzAxMjI3MjMwMjUxWjA6MQwwCgYDVQQGEwNVU0ExEjAQBgNVBAcTCVBhbG8gQWx0bzEWMBQGA1UEAwwNKi5pZGVtZXVtLmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMIVX288afPVD2Xhr+Zmc0BCbCVZumwYOFAjp659jytT8kpBuGXdu7A6CYE7CxVc4NeiwaDmteNp3x1INDBS+TSfHkWCNh+6sUhY4jyZVajuGJOCna4+NB2GLx4hl9+AzjfzKQBTT7CNoDLfGvE8ZtUdItCYrBIG8q37Z/2D3zLS90bmomQEGTzy45ckZ1+Q0nyHEikj3hrqUVotTr0ivylmRLj0Qnup3Eh0s8l5Lvb9VYauhL4KyqVqFnYv57Qg22+d6ZOCn6at6AiZbG8wlF5d/uppu6l3rigSKOFewK9rVwhGxTbgP2JZeCdXuDs5+d6b6zS0dfSQpgzyEy/Jmw0CAwEAATANBgkqhkiG9w0BAQsFAAOCAQEAWVG0ufqrF9oBYCBzm68i2di2IuEMhF2gW5ixcVgjfLLpnFrT0Lkt4taF+32ykNU9kram/SjSHF2+hJoBZ4BBQYIMXyA9TFn1bcn7LOq8uiDS/cF9noHlYrxOboq0qc38R4wkjSOEOFhs98zhRz2IPUccvwgfoiQZS3lt12Gb8KcZPaGKVnoxunpe7mQj69WkiKgBJLR2G4ODIX+FY01zwz7coplqYMOohTgOV/ej1BloWVWHFTkXKDtIgeuyQWGnJ3gBjDzmB5XwxvxA0NNCZVzhO23S0z/rn8eqKQ6obkabZUILurOeBC4wKEH314sbtOIP0NTI+Xc5LpbOwonhVQ==\" $IssuerUri = \"https://myhospital.idemeum.com/api/saml/metadata/idp.xml\" $Protocol = \"SAMLP\" Set-MsolDomainAuthentication -DomainName $Domain -FederationBrandName $BrandName -Authentication federated -PassiveLogOnUri $LogOnUrl -SigningCertificate $SigningCert -IssuerUri $IssuerUri -LogOffUri $LogOffUrl -PreferredAuthenticationProtocol $Protocol Verify that the settings are successfully configured for your domain. 1 Get-MsolDomainFederationSettings -DomainName < your domain here > | format-list * \ud83e\uddea 3. Test user sign in Once you are done with configuration you can quickly test the user sign-in flow. Open incognito browser window and navigate to portal.office.com Enter the email address of the account that you would like to sign into. Once you do that you will be redirected to idemeum for login. You will see the QR code that you will need to scan with the idemeum application. Once you scan the QR code with idemeum application and approve the sign in, you will be redirected to office 365. \ud83c\udf89 Congratulations! You have successfully integrated idemeum and protected your O365 deployment with passwordless authentication. Microsoft documentation - Configure SAML federation provider \u21a9 Azure AD SAML metadata \u21a9 MSOnline reference documentation \u21a9 Contact idemeum for any support questions \u21a9","title":"Azure AD (B2B)"},{"location":"azuread/#integrate-idemeum-with-azure-ad-b2b","text":".embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }","title":" Integrate idemeum with Azure AD (B2B)"},{"location":"azuread/#how-can-idemeum-help-secure-o365","text":"idemeum integrates with Azure Active Directory (AAD) directly over SAML and provides the following services: Service Description Passwordless MFA Eliminate passwords when users access your SSO and O365 resources. No enrollment, no user sync, easy and simple. idemeum supports cloud-only as well as hybrid deployment models.","title":"How can idemeum help secure O365?"},{"location":"azuread/#how-is-o365-deployed","text":"O365 and Azure Active Directory (AAD) can be implemented with various deployment models . Deployment model Definition Cloud only identity User account only exists in the Azure AD tenant for your Microsoft 365 subscription. Hybrid identity User account exists in AD DS and a copy is also in the Azure AD tenant for your Microsoft 365 subscription. The user account in Azure AD might also include a hashed version of the already hashed AD DS user account password. For authentication there are several options: password hash synchronization , pass-through authentication , and federation with ADFS .","title":"How is O365 deployed?"},{"location":"azuread/#how-is-idemeum-integrated-with-o365","text":"idemeum can be federated directly with AAD using SAML protocol. When federating directly with Azure AD, idemeum can support cloud only as well as hybrid (password sync and pass-through) models.","title":"How is idemeum integrated with O365?"},{"location":"azuread/#integrate-idemeum-with-azure-ad","text":"We are going to go through simple three steps to integrate idemeum with your Microsoft identity environment. Request idemeum tenant Configure Azure AD for federation Test user sign-in All additional Microsoft documentation and useful links can be found in footnotes .","title":"Integrate idemeum with Azure AD"},{"location":"azuread/#1-request-idemeum-tenant","text":"As a first step, reach out to idemeum team at support@idemeum.com with the request to provision idemeum tenant. Please, let us know that you will be integrating idemeum with Azure AD. We will need several things from you: Preferred tenant name - we will provision a tenant name for you based on your preferences. The tenant name will be in the form of <your company>.idemeum.com . Company logo - share your company logo with us so that we can display it on every login page request as well as in the application, when users log into your company resources. We will need the image in the png or jpeg format. As a result of tenant provisioning we will share the configuration details with you, so that you can later use them in your Azure AD configuration: $LogOnUrl - SAML LogOn URL. $LogOffUrl - SAML LogOff URL. $SigningCert - signing certificate to establish federation trust. $IssuerUri - URI to identify idemeum in SAML responses. Tip You can always get this and additional information from your SAML metadata XML file. You can access this information by using the following link https://<your tenant name>/api/saml/metadata/idp.xml . Replace [your tenant name] with your actual tenant name that we will provision for you.","title":"\u2699\ufe0f 1. Request idemeum tenant"},{"location":"azuread/#2-configure-azure-ad-for-federation","text":"After signing up for Office 365, the only domain associated with your account is the onmicrosoft.com subdomain chosen during registration (for example, contoso.onmicrosoft.com ). To allow users to SSO to Azure AD and Office 365, it is recommended to have another domain added to the environment. If you already have such domain added and verified, you can always use that. Make sure you have admin account with another domain Once you configure Azure AD domain to be federated, you will no longer be able to use local login into accounts associated with that domain. Therefore, if something is wrong with the configuration, you might lock yourself out. To prevent that, make sure you have admin account created on other domain (for instance on your onmicrosoft.com domain), so that you can always use that account to log in and revert federation configuration. We will be using PowerShell to configure the Azure AD domain for federation 1 . Launch PowerShell on a Windows machine Install MSOnline PowerShell module if you have not already 1 Install-Module MSOnline Connect to MSOnline service. You will need to authenticate with your Azure AD Portal admin credentials 1 Connect-MsolService You can check your existing domains and their federation settings 1 Get-MsolDomain Check your current domain federation settings. If the current setting is federated , you will need to first convert domain to `managed' setting 1 Get-MsolDomainFederationSettings 1 Set-MsolDomainAuthentication -DomainName < yourdomain > -Authentication managed Now you can configure your domain with federation settings. Take a look at the example below. $Domain - the domain that you are planning to federate with idemeum $BrandName - the name that you will use for federation $LogOnUrl - this is a SAML LogOn URL. We will share this URL with you as part of onboarding. $LogOffUrl - this is a SAML LogOff URL. We will share this URL with you as part of onboarding $SigningCert - signing certificate to establish federation trust. We will share this certificate with you as part of onboarding. $IssuerUri - URI that identifies idemeum as SAML issuer. $Protocol - protocol to use for federation. In our case it is SAML 1 2 3 4 5 6 7 8 9 $Domain = \"idemeumlab.com\" $BrandName = \"idemeum\" $LogOnUrl = \"https://myhospital.idemeum.com/api/saml/sso\" $LogOffUrl = \"https://myhospital.idemeum.com/api/saml/slo\" $SigningCert = \"MIIC9DCCAdygAwIBAgIIPKj+xeu3fLQwDQYJKoZIhvcNAQELBQAwOjEMMAoGA1UEBhMDVVNBMRIwEAYDVQQHEwlQYWxvIEFsdG8xFjAUBgNVBAMMDSouaWRlbWV1bS5jb20wHhcNMjAxMjI5MjMwMjUxWhcNMzAxMjI3MjMwMjUxWjA6MQwwCgYDVQQGEwNVU0ExEjAQBgNVBAcTCVBhbG8gQWx0bzEWMBQGA1UEAwwNKi5pZGVtZXVtLmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMIVX288afPVD2Xhr+Zmc0BCbCVZumwYOFAjp659jytT8kpBuGXdu7A6CYE7CxVc4NeiwaDmteNp3x1INDBS+TSfHkWCNh+6sUhY4jyZVajuGJOCna4+NB2GLx4hl9+AzjfzKQBTT7CNoDLfGvE8ZtUdItCYrBIG8q37Z/2D3zLS90bmomQEGTzy45ckZ1+Q0nyHEikj3hrqUVotTr0ivylmRLj0Qnup3Eh0s8l5Lvb9VYauhL4KyqVqFnYv57Qg22+d6ZOCn6at6AiZbG8wlF5d/uppu6l3rigSKOFewK9rVwhGxTbgP2JZeCdXuDs5+d6b6zS0dfSQpgzyEy/Jmw0CAwEAATANBgkqhkiG9w0BAQsFAAOCAQEAWVG0ufqrF9oBYCBzm68i2di2IuEMhF2gW5ixcVgjfLLpnFrT0Lkt4taF+32ykNU9kram/SjSHF2+hJoBZ4BBQYIMXyA9TFn1bcn7LOq8uiDS/cF9noHlYrxOboq0qc38R4wkjSOEOFhs98zhRz2IPUccvwgfoiQZS3lt12Gb8KcZPaGKVnoxunpe7mQj69WkiKgBJLR2G4ODIX+FY01zwz7coplqYMOohTgOV/ej1BloWVWHFTkXKDtIgeuyQWGnJ3gBjDzmB5XwxvxA0NNCZVzhO23S0z/rn8eqKQ6obkabZUILurOeBC4wKEH314sbtOIP0NTI+Xc5LpbOwonhVQ==\" $IssuerUri = \"https://myhospital.idemeum.com/api/saml/metadata/idp.xml\" $Protocol = \"SAMLP\" Set-MsolDomainAuthentication -DomainName $Domain -FederationBrandName $BrandName -Authentication federated -PassiveLogOnUri $LogOnUrl -SigningCertificate $SigningCert -IssuerUri $IssuerUri -LogOffUri $LogOffUrl -PreferredAuthenticationProtocol $Protocol Verify that the settings are successfully configured for your domain. 1 Get-MsolDomainFederationSettings -DomainName < your domain here > | format-list *","title":"\ud83e\uddd1\ud83c\udfff\u200d\ud83e\udd1d\u200d\ud83e\uddd1\ud83c\udffc 2. Configure Azure AD for federation"},{"location":"azuread/#3-test-user-sign-in","text":"Once you are done with configuration you can quickly test the user sign-in flow. Open incognito browser window and navigate to portal.office.com Enter the email address of the account that you would like to sign into. Once you do that you will be redirected to idemeum for login. You will see the QR code that you will need to scan with the idemeum application. Once you scan the QR code with idemeum application and approve the sign in, you will be redirected to office 365. \ud83c\udf89 Congratulations! You have successfully integrated idemeum and protected your O365 deployment with passwordless authentication. Microsoft documentation - Configure SAML federation provider \u21a9 Azure AD SAML metadata \u21a9 MSOnline reference documentation \u21a9 Contact idemeum for any support questions \u21a9","title":"\ud83e\uddea 3. Test user sign in"},{"location":"enterprise-overview/","text":"Enterprise idemeum idemeum is very easy to integrate with various IT and identity infrastructure systems. idemeum leverages standard authentication protocols such as OpenID Connect , SAML , and FIDO / FIDO2 to deliver passwordless authentication and onboarding experience for your employees. Don\u2019t see what you\u2019re looking for? \ud83d\udc81\ud83c\udffb Contact our team, and we will be happy to help integrate idemeum with what you need.","title":"Overview"},{"location":"enterprise-overview/#enterprise-idemeum","text":"idemeum is very easy to integrate with various IT and identity infrastructure systems. idemeum leverages standard authentication protocols such as OpenID Connect , SAML , and FIDO / FIDO2 to deliver passwordless authentication and onboarding experience for your employees. Don\u2019t see what you\u2019re looking for? \ud83d\udc81\ud83c\udffb Contact our team, and we will be happy to help integrate idemeum with what you need.","title":"Enterprise idemeum"},{"location":"google/","text":"Integrate idemeum with Google workspace .embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; } How can idemeum help secure Google Workspace deployments? idemeum integrates with Google Cloud Identity directly over SAML and provides the following services: Service Description Passwordless MFA Eliminate passwords when users access your SSO applications. No enrollment, no user sync, easy and simple. How does the integration work? idemeum integrates with Google Cloud Identity in minutes. As idemeum is decentralized, there is no need to synchronize users to idemeum from Active or LDAP directory, or deploy any additional servers and connectors. Simply federate your Google Cloud Identity tenant with idemeum over SAML protocol. \ud83d\udc68\u200d\ud83d\udcbb In the diagram above, we see the deployment where Google Cloud Identity is deployed as a primary IDP and all applications are federated directly with it. When user is trying to authenticate to any corporate application or Google Workspace, the sign in request is sent first to Google Cloud Identity, and is then subsequently redirected to idemeum. idemeum performs Passwordless Multi-Factor authentication and returns necessary user information to Google Cloud Identity, which in turn forwards that user information to federated application. As a result users can access application without any passwords. Integrate idemeum with Google Cloud Identity We are going to go through simple three steps to integrate idemeum with your Google Workspace environment. Request idemeum tenant Configure Google Cloud Identity for federation Test user sign-in 1. \ud83e\udd1d Request idemeum tenant \ud83d\udc49 As a first step, reach out to idemeum team at support@idemeum.com with the request to provision idemeum tenant. Please, let us know that you will be integrating idemeum with Google Workspace. We will need several things from you: Preferred tenant name - we will provision a tenant name for you based on your preferences. The tenant name will be in the form of <your company>.idemeum.com . Company logo - share your company logo with us so that we can display it on every login page request as well as in the application, when users log into your company resources. We will need the image in the png or jpeg format. As a result, we will share the following with you: IdP Single Sign-On URL - you will need this URI to configure Google Cloud Identity federation with idemeum. This is the URL where Google Cloud Identity will send SAML requests to. IdP Signature Certificate - you will need this certificate to establish secure trust between Google Cloud Identity and idemeum. Tip When we provision idemeum tenant for you, your tenant's metadata XML file will be accessible using this link https://<your tenant name>/api/saml/metadata/idp.xml . All configuration parameters listed above can be extracted from this SAML metadata file. 2. \u2699\ufe0f Configure Google Cloud Identity for federation Sign in to your Google Workspace Admin portal Navigate to Security , scroll down and find the section Set up single sign-on (SSO) with a third party IdP . Click on that section to set up idemeum as 3rd party IDP. Configure the following settings: Set up SSO with third-party identity provider - enable checkbox Sign-in page URL - enter the URL that we shared with you after tenant creation. You can always get that data from your idemeum SAML XML file. Sign-out page URL - enter https://accounts.google.com Verification certificate - upload the certificate that we shared with you. You can always get that data from your idemeum SAML XML file. Leave other fields blank. Click Save At this point you configured idemeum to become 3rd party IDP for Google Cloud Identity, and all authentication requests for your domain will be redirected to idemeum. Note Authentication for admin console with Admin credentials is still handled by Google Cloud identity. All you need to do it to navigate to https://admin.google.com/u/0/ac/home and login with your admin credentials. Please refer to documentation here . 3. \ud83e\uddea Test user sign-in Once you are done with configuration you can quickly test the user sign-in flow. Open incognito browser window and navigate to your accounts.google.com/ . Enter your email address with you domain, and you will be redirected to idemeum for sign in. You will need to scan QR code with idemeum app. Once you scan the QR code with idemeum application and approve the sign in, you will be redirected to Google Workspace application catalog. \ud83c\udf89 Congratulations! You have successfully integrated idemeum and protected your Google Workspace deployment with passwordless multi-factor authentication. Set up SSO via a third party Identity provider \u21a9 Understanding SAML secure sign-in \u21a9 SSO assertion requirements \u21a9","title":"Google Cloud Identity"},{"location":"google/#integrate-idemeum-with-google-workspace","text":".embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }","title":" Integrate idemeum with Google workspace"},{"location":"google/#how-can-idemeum-help-secure-google-workspace-deployments","text":"idemeum integrates with Google Cloud Identity directly over SAML and provides the following services: Service Description Passwordless MFA Eliminate passwords when users access your SSO applications. No enrollment, no user sync, easy and simple.","title":"How can idemeum help secure Google Workspace deployments?"},{"location":"google/#how-does-the-integration-work","text":"idemeum integrates with Google Cloud Identity in minutes. As idemeum is decentralized, there is no need to synchronize users to idemeum from Active or LDAP directory, or deploy any additional servers and connectors. Simply federate your Google Cloud Identity tenant with idemeum over SAML protocol. \ud83d\udc68\u200d\ud83d\udcbb In the diagram above, we see the deployment where Google Cloud Identity is deployed as a primary IDP and all applications are federated directly with it. When user is trying to authenticate to any corporate application or Google Workspace, the sign in request is sent first to Google Cloud Identity, and is then subsequently redirected to idemeum. idemeum performs Passwordless Multi-Factor authentication and returns necessary user information to Google Cloud Identity, which in turn forwards that user information to federated application. As a result users can access application without any passwords.","title":"How does the integration work?"},{"location":"google/#integrate-idemeum-with-google-cloud-identity","text":"We are going to go through simple three steps to integrate idemeum with your Google Workspace environment. Request idemeum tenant Configure Google Cloud Identity for federation Test user sign-in","title":"Integrate idemeum with Google Cloud Identity"},{"location":"google/#1-request-idemeum-tenant","text":"\ud83d\udc49 As a first step, reach out to idemeum team at support@idemeum.com with the request to provision idemeum tenant. Please, let us know that you will be integrating idemeum with Google Workspace. We will need several things from you: Preferred tenant name - we will provision a tenant name for you based on your preferences. The tenant name will be in the form of <your company>.idemeum.com . Company logo - share your company logo with us so that we can display it on every login page request as well as in the application, when users log into your company resources. We will need the image in the png or jpeg format. As a result, we will share the following with you: IdP Single Sign-On URL - you will need this URI to configure Google Cloud Identity federation with idemeum. This is the URL where Google Cloud Identity will send SAML requests to. IdP Signature Certificate - you will need this certificate to establish secure trust between Google Cloud Identity and idemeum. Tip When we provision idemeum tenant for you, your tenant's metadata XML file will be accessible using this link https://<your tenant name>/api/saml/metadata/idp.xml . All configuration parameters listed above can be extracted from this SAML metadata file.","title":"1. \ud83e\udd1d Request idemeum tenant"},{"location":"google/#2-configure-google-cloud-identity-for-federation","text":"Sign in to your Google Workspace Admin portal Navigate to Security , scroll down and find the section Set up single sign-on (SSO) with a third party IdP . Click on that section to set up idemeum as 3rd party IDP. Configure the following settings: Set up SSO with third-party identity provider - enable checkbox Sign-in page URL - enter the URL that we shared with you after tenant creation. You can always get that data from your idemeum SAML XML file. Sign-out page URL - enter https://accounts.google.com Verification certificate - upload the certificate that we shared with you. You can always get that data from your idemeum SAML XML file. Leave other fields blank. Click Save At this point you configured idemeum to become 3rd party IDP for Google Cloud Identity, and all authentication requests for your domain will be redirected to idemeum. Note Authentication for admin console with Admin credentials is still handled by Google Cloud identity. All you need to do it to navigate to https://admin.google.com/u/0/ac/home and login with your admin credentials. Please refer to documentation here .","title":"2. \u2699\ufe0f Configure Google Cloud Identity for federation"},{"location":"google/#3-test-user-sign-in","text":"Once you are done with configuration you can quickly test the user sign-in flow. Open incognito browser window and navigate to your accounts.google.com/ . Enter your email address with you domain, and you will be redirected to idemeum for sign in. You will need to scan QR code with idemeum app. Once you scan the QR code with idemeum application and approve the sign in, you will be redirected to Google Workspace application catalog. \ud83c\udf89 Congratulations! You have successfully integrated idemeum and protected your Google Workspace deployment with passwordless multi-factor authentication. Set up SSO via a third party Identity provider \u21a9 Understanding SAML secure sign-in \u21a9 SSO assertion requirements \u21a9","title":"3. \ud83e\uddea Test user sign-in"},{"location":"intro/","text":"What is idemeum? With idemeum your mobile device becomes your universal digital identity, which: Eliminates passwords when accessing corporate and personal applications Protects against identity fraud Enables 100% privacy How does idemeum do it? To do this we built a digital identity platform that is Decentralized, Verified, and Mobile. Let's get deeper into what that means. \ud83e\udea2 Decentralized idemeum is private by design. All user information is stored safely and securely on users' mobile devices. We store zero PII information in our backend. \u2705 Verified When users create their identity, we remotely verify all information, such as email address, phone number, and ID document. By doing so we reduce identity fraud and increase online trust. \ud83d\udcf1Mobile Mobile device replaces passwords and becomes universal digital identity. To access resources users leverage cryptography and biometric sensors on their devices. This greatly simplifies and improves user experience while maintaining high level of security . What does idemeum mean? We wanted the name of the product to reflect our mission and what we stand for. idemeum is comprised of two latin words: meum and idem that mean \"my\" and \"identity\". We aspire idemeum to be truly yours. Something that you can own, control, and share only with people and services you choose to. And we want idemeum to be your digital identity. Not some random string of characters that is hard to remember, but your true digital identity that you can use personally and professionally. idemeum for enterprise idemeum offers a variety of use cases for enterprises, including Verified Passwordless MFA . idemeum is very simple to deploy and POC, as there are no on-premises components or user sync requirements. As simple as connect idemeum cloud service with your identity infrastructure.","title":"Intro"},{"location":"intro/#what-is-idemeum","text":"With idemeum your mobile device becomes your universal digital identity, which: Eliminates passwords when accessing corporate and personal applications Protects against identity fraud Enables 100% privacy","title":"What is idemeum?"},{"location":"intro/#how-does-idemeum-do-it","text":"To do this we built a digital identity platform that is Decentralized, Verified, and Mobile. Let's get deeper into what that means.","title":"How does idemeum do it?"},{"location":"intro/#decentralized","text":"idemeum is private by design. All user information is stored safely and securely on users' mobile devices. We store zero PII information in our backend.","title":"\ud83e\udea2 Decentralized"},{"location":"intro/#verified","text":"When users create their identity, we remotely verify all information, such as email address, phone number, and ID document. By doing so we reduce identity fraud and increase online trust.","title":"\u2705 Verified"},{"location":"intro/#mobile","text":"Mobile device replaces passwords and becomes universal digital identity. To access resources users leverage cryptography and biometric sensors on their devices. This greatly simplifies and improves user experience while maintaining high level of security .","title":"\ud83d\udcf1Mobile"},{"location":"intro/#what-does-idemeum-mean","text":"We wanted the name of the product to reflect our mission and what we stand for. idemeum is comprised of two latin words: meum and idem that mean \"my\" and \"identity\". We aspire idemeum to be truly yours. Something that you can own, control, and share only with people and services you choose to. And we want idemeum to be your digital identity. Not some random string of characters that is hard to remember, but your true digital identity that you can use personally and professionally.","title":"What does idemeum mean?"},{"location":"intro/#idemeum-for-enterprise","text":"idemeum offers a variety of use cases for enterprises, including Verified Passwordless MFA . idemeum is very simple to deploy and POC, as there are no on-premises components or user sync requirements. As simple as connect idemeum cloud service with your identity infrastructure.","title":"idemeum for enterprise"},{"location":"okta/","text":"Integrate idemeum with Okta .embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; } How can idemeum help secure Okta deployments? idemeum integrates with Okta directly over SAML and provides the following services: Service Description Passwordless MFA Eliminate passwords when users access your SSO applications. No enrollment, no user sync, easy and simple. Verified log in idemeum has built in document verification. When integrated with Okta, idemeum can log in users not just using their email address, but also verified first name and last name, whereby making every login trusted and verified and reducing identity fraud. How does the integration work? idemeum integrates with Okta in minutes. As idemeum is decentralized, there is no need to synchronize users to idemeum from Active Directory, or deploy any additional servers and connectors. Simply federate your Okta tenant with idemeum over SAML protocol. In the diagram above, we see the deployment where Okta is deployed as a primary IDP and all applications are federated directly with Okta. When user is trying to authenticate to any corporate application, the sign in request is sent first to Okta, and is then subsequently redirected to idemeum. idemeum performs Passwordless Multi-Factor authentication and returns necessary user information to Okta, which in turn forwards that user information to federated application. As a result users can access application without any passwords. idemeum differentiation The key difference to note here is that you can configure idemeum to release not just email, but also first name and last name for employee. When all these claims are processed for authentication, the match is done not just with email but with verified ID document information. Therefore, every login becomes trusted. Integrate idemeum with Okta We are going to go through simple four steps to integrate idemeum with your Okta identity environment. Request idemeum tenant Set up verified login (optional) Configure Okta for federation Test user sign-in 1. \ud83e\udd1d Request idemeum tenant \ud83d\udc49 As a first step, reach out to idemeum team at support@idemeum.com with the request to provision idemeum tenant. Please, let us know that you will be integrating idemeum with Okta and whether you want to use verified login or not. We will need several things from you: Preferred tenant name - we will provision a tenant name for you based on your preferences. The tenant name will be in the form of <your company>.idemeum.com . Company logo - share your company logo with us so that we can display it on every login page request as well as in the application, when users log into your company resources. We will need the image in the png or jpeg format. Okta SAML IDP metadata - we will need your Okta IDP metadata file, so that we can configure SAML trust on our end. As a result, we will share the following with you: IDP issuer URI - you will need this URI to configure Okta federation with idemeum. This URI can always be extracted from your idemeum SAML metadata file. IdP Single Sign-On URL - you will need this URI to configure Okta federation with idemeum. This is the URL where Okta will send SAML requests to. IdP Signature Certificate - you will need this certificate to establish secure trust between Okta and idemeum. Tip When we provision idemeum tenant for you, your tenant's metadata XML file will be accessible using this link https://<your tenant name>/api/saml/metadata/idp.xml . All configuration parameters listed above can be extracted from this SAML metadata file. 2. \u2714\ufe0f Set up verified login This step is optional. You can login your users and match the account using only email address. This is what most of the commercial identity solutions do today. However, idemeum offers an opportunity to increase identity trust and login your users with not just email, but a combination of email + firstName + lastName . To make it work, we will need to create a custom attribute for Okta users, say verifiedIdentity and populate it with a combination of email + firstName + lastName. When idemeum will return verified user claims, Okta will match them against this custom attribute. In this case we are going to be working with Active Directory users that you are synchronizing to Okta tenant. Login to your Okta tenant with admin account Navigate to Directory -> Profile editor Choose User(default) profile, click Add Attribute and create custom attribute that you will be using for user matching. In our case we are creating an attribute with the display name Verified Identity and variable name verifiedIdentity . We are not making this attribute required. Now navigate to Directory -> Profile editor and then choose your Active Directory integration and click Mappings . Scroll all the way down to find custom attribute that we created. And now create a custom mapping for this attribute. 1 toLowerCase ( appuser . firstName ) + '_' + toLowerCase ( appuser . lastName ) + '_' + toLowerCase ( appuser . email ) Info What this means is that when users will be synced from Active Directory, Okta will take a combination of firstName + lastName + email and will populate that combination into our custom attribute verifiedIdentity . At this point we have configured everything necessary to perform verified login with claims passed from idemeum. Now we can move to the next step of configuring SAML federation between Okta and idemeum. Tip At this point you will need to force sync users from Active Directory to make sure custom attributes get populated for all your existing or new users. 3. \u2699\ufe0f Configure Okta for federation Configure 3rd party IDP Navigate to Security -> Identity Providers -> Add Identity Provider -> Add SAML 2.0 IDP Let's configure the following options. Name - assign a name to your IDP, for example idemeum SAML IDP username - create custom string for this attribute 1 String . toLowerCase ( idpuser . firstName ) + '_' + String . toLowerCase ( idpuser . lastName ) + '_' + idpuser . email Match against - choose the display name of the custom attribute your created in the previous section. Account Link Policy - choose Automatic Account Link Restriction - choose None If match not found - choose Redirect to Okta sign-in page IDP issuer URI - enter the URI that we shared with you. You will always have that available in your idemeum metadata file. IdP Single Sign-On URL - enter the URL that we shared with you. You will always have that available in your idemeum metadata file. IdP Signature Certificate - enter the certificate that we shared with you. You will always have that available in your idemeum metadata file. Request Binding - make sure you have HTTP POST selected. You can leave other parameters with default settings. Save your identity provider configuration. Return to Identity Providers section, expand the details of the identity provider you just created by clicking on the arrow next to IDP name, download metadata file and share with our support team . We will need this information to establish trust between your Okta tenant and idemeum. At this point you created identity provider in Okta to federate all authentication requests with idemeum. As a next step you need to apply this identity provider in Okta Routing Rules. Configure routing rule Navigate to Security -> Identity Providers -> Routing Rules . In this case we are going to create a new routing rule for passwordless authentication. As you can see we are keeping default configuration, but we are using our idemeum SAML identity provider for authentication. Warning Once you enable a routing rule, all authentication requests will be redirected to idemeum. If for any reason the idemeum authentication does not work, and you need to log into Okta admin account with username and password, you can always use the backdoor entry that bypasses routing rules. You can access it by using the following link https://<your Okta tenant>/login/default Tip In this case we enabled idemeum authentication for all users in Okta. If you want to configure a small group of users to try out idemeum, you can always create a special group, put your test users in that group, and assign routing rule only to this group. To do that you can use User matches configuration in the routing rule set up. It is also recommended that you customize Sign-Out page when routing rule is enabled with idemeum. To do that, navigate to Settings -> Customization , and click Edit in the Sign-Out Page section. Choose Use a custom sign-out page and enter any page, for example https://okta.com . Click Save . 4. \ud83e\uddea Test user sign-in Once you are done with configuration you can quickly test the user sign-in flow. Open incognito browser window and navigate to your Okta tenant URL. Once you do that you will be redirected to idemeum for login. You will see the QR code that you will need to scan with the idemeum application. Once you scan the QR code with idemeum application and approve the sign in, you will be redirected to Okta application catalog. \ud83c\udf89 Congratulations! You have successfully integrated idemeum and protected your Okta deployment with passwordless multi-factor authentication. Create an Identity Provider in Okta \u21a9 Identity Providers in Okta \u21a9 Configure routing rules in Okta \u21a9","title":"Okta"},{"location":"okta/#integrate-idemeum-with-okta","text":".embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }","title":"Integrate idemeum with Okta"},{"location":"okta/#how-can-idemeum-help-secure-okta-deployments","text":"idemeum integrates with Okta directly over SAML and provides the following services: Service Description Passwordless MFA Eliminate passwords when users access your SSO applications. No enrollment, no user sync, easy and simple. Verified log in idemeum has built in document verification. When integrated with Okta, idemeum can log in users not just using their email address, but also verified first name and last name, whereby making every login trusted and verified and reducing identity fraud.","title":"How can idemeum help secure Okta deployments?"},{"location":"okta/#how-does-the-integration-work","text":"idemeum integrates with Okta in minutes. As idemeum is decentralized, there is no need to synchronize users to idemeum from Active Directory, or deploy any additional servers and connectors. Simply federate your Okta tenant with idemeum over SAML protocol. In the diagram above, we see the deployment where Okta is deployed as a primary IDP and all applications are federated directly with Okta. When user is trying to authenticate to any corporate application, the sign in request is sent first to Okta, and is then subsequently redirected to idemeum. idemeum performs Passwordless Multi-Factor authentication and returns necessary user information to Okta, which in turn forwards that user information to federated application. As a result users can access application without any passwords. idemeum differentiation The key difference to note here is that you can configure idemeum to release not just email, but also first name and last name for employee. When all these claims are processed for authentication, the match is done not just with email but with verified ID document information. Therefore, every login becomes trusted.","title":"How does the integration work?"},{"location":"okta/#integrate-idemeum-with-okta_1","text":"We are going to go through simple four steps to integrate idemeum with your Okta identity environment. Request idemeum tenant Set up verified login (optional) Configure Okta for federation Test user sign-in","title":"Integrate idemeum with Okta"},{"location":"okta/#1-request-idemeum-tenant","text":"\ud83d\udc49 As a first step, reach out to idemeum team at support@idemeum.com with the request to provision idemeum tenant. Please, let us know that you will be integrating idemeum with Okta and whether you want to use verified login or not. We will need several things from you: Preferred tenant name - we will provision a tenant name for you based on your preferences. The tenant name will be in the form of <your company>.idemeum.com . Company logo - share your company logo with us so that we can display it on every login page request as well as in the application, when users log into your company resources. We will need the image in the png or jpeg format. Okta SAML IDP metadata - we will need your Okta IDP metadata file, so that we can configure SAML trust on our end. As a result, we will share the following with you: IDP issuer URI - you will need this URI to configure Okta federation with idemeum. This URI can always be extracted from your idemeum SAML metadata file. IdP Single Sign-On URL - you will need this URI to configure Okta federation with idemeum. This is the URL where Okta will send SAML requests to. IdP Signature Certificate - you will need this certificate to establish secure trust between Okta and idemeum. Tip When we provision idemeum tenant for you, your tenant's metadata XML file will be accessible using this link https://<your tenant name>/api/saml/metadata/idp.xml . All configuration parameters listed above can be extracted from this SAML metadata file.","title":"1. \ud83e\udd1d Request idemeum tenant"},{"location":"okta/#2-set-up-verified-login","text":"This step is optional. You can login your users and match the account using only email address. This is what most of the commercial identity solutions do today. However, idemeum offers an opportunity to increase identity trust and login your users with not just email, but a combination of email + firstName + lastName . To make it work, we will need to create a custom attribute for Okta users, say verifiedIdentity and populate it with a combination of email + firstName + lastName. When idemeum will return verified user claims, Okta will match them against this custom attribute. In this case we are going to be working with Active Directory users that you are synchronizing to Okta tenant. Login to your Okta tenant with admin account Navigate to Directory -> Profile editor Choose User(default) profile, click Add Attribute and create custom attribute that you will be using for user matching. In our case we are creating an attribute with the display name Verified Identity and variable name verifiedIdentity . We are not making this attribute required. Now navigate to Directory -> Profile editor and then choose your Active Directory integration and click Mappings . Scroll all the way down to find custom attribute that we created. And now create a custom mapping for this attribute. 1 toLowerCase ( appuser . firstName ) + '_' + toLowerCase ( appuser . lastName ) + '_' + toLowerCase ( appuser . email ) Info What this means is that when users will be synced from Active Directory, Okta will take a combination of firstName + lastName + email and will populate that combination into our custom attribute verifiedIdentity . At this point we have configured everything necessary to perform verified login with claims passed from idemeum. Now we can move to the next step of configuring SAML federation between Okta and idemeum. Tip At this point you will need to force sync users from Active Directory to make sure custom attributes get populated for all your existing or new users.","title":"2. \u2714\ufe0f Set up verified login"},{"location":"okta/#3-configure-okta-for-federation","text":"","title":"3. \u2699\ufe0f Configure Okta for federation"},{"location":"okta/#configure-3rd-party-idp","text":"Navigate to Security -> Identity Providers -> Add Identity Provider -> Add SAML 2.0 IDP Let's configure the following options. Name - assign a name to your IDP, for example idemeum SAML IDP username - create custom string for this attribute 1 String . toLowerCase ( idpuser . firstName ) + '_' + String . toLowerCase ( idpuser . lastName ) + '_' + idpuser . email Match against - choose the display name of the custom attribute your created in the previous section. Account Link Policy - choose Automatic Account Link Restriction - choose None If match not found - choose Redirect to Okta sign-in page IDP issuer URI - enter the URI that we shared with you. You will always have that available in your idemeum metadata file. IdP Single Sign-On URL - enter the URL that we shared with you. You will always have that available in your idemeum metadata file. IdP Signature Certificate - enter the certificate that we shared with you. You will always have that available in your idemeum metadata file. Request Binding - make sure you have HTTP POST selected. You can leave other parameters with default settings. Save your identity provider configuration. Return to Identity Providers section, expand the details of the identity provider you just created by clicking on the arrow next to IDP name, download metadata file and share with our support team . We will need this information to establish trust between your Okta tenant and idemeum. At this point you created identity provider in Okta to federate all authentication requests with idemeum. As a next step you need to apply this identity provider in Okta Routing Rules.","title":"Configure 3rd party IDP"},{"location":"okta/#configure-routing-rule","text":"Navigate to Security -> Identity Providers -> Routing Rules . In this case we are going to create a new routing rule for passwordless authentication. As you can see we are keeping default configuration, but we are using our idemeum SAML identity provider for authentication. Warning Once you enable a routing rule, all authentication requests will be redirected to idemeum. If for any reason the idemeum authentication does not work, and you need to log into Okta admin account with username and password, you can always use the backdoor entry that bypasses routing rules. You can access it by using the following link https://<your Okta tenant>/login/default Tip In this case we enabled idemeum authentication for all users in Okta. If you want to configure a small group of users to try out idemeum, you can always create a special group, put your test users in that group, and assign routing rule only to this group. To do that you can use User matches configuration in the routing rule set up. It is also recommended that you customize Sign-Out page when routing rule is enabled with idemeum. To do that, navigate to Settings -> Customization , and click Edit in the Sign-Out Page section. Choose Use a custom sign-out page and enter any page, for example https://okta.com . Click Save .","title":"Configure routing rule"},{"location":"okta/#4-test-user-sign-in","text":"Once you are done with configuration you can quickly test the user sign-in flow. Open incognito browser window and navigate to your Okta tenant URL. Once you do that you will be redirected to idemeum for login. You will see the QR code that you will need to scan with the idemeum application. Once you scan the QR code with idemeum application and approve the sign in, you will be redirected to Okta application catalog. \ud83c\udf89 Congratulations! You have successfully integrated idemeum and protected your Okta deployment with passwordless multi-factor authentication. Create an Identity Provider in Okta \u21a9 Identity Providers in Okta \u21a9 Configure routing rules in Okta \u21a9","title":"4. \ud83e\uddea Test user sign-in"},{"location":"ws1access/","text":"Integrate idemeum with VMware WS1 Access .embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; } How can idemeum help secure Workspace ONE deployments? idemeum integrates with Workspace ONE Access directly over SAML and provides the following services: Service Description Passwordless MFA Eliminate passwords when users access your SSO applications. No enrollment, no user sync, easy and simple. How does the integration work? idemeum integrates with Workspace ONE in minutes. As idemeum is decentralized, there is no need to synchronize users to idemeum from Active Directory, or deploy any additional servers and connectors. Simply federate your Workspace ONE appliance or SaaS tenant with idemeum over SAML protocol. Workspace ONE Access can be your primary Identity Provider or a broker. idemeum can integrate either directly with your primary identity provider, or it can integrate with Access when it is deployed as a broker. In the diagram above, we can see the deployment where WS1 Access is deployed as a primary IDP and all applications are federated directly with WS1 Access. When user is trying to authenticate to any corporate application, the sign in request is sent first to WS1 Access, and is then subsequently redirected to idemeum. idemeum performs Passwordless Multi-Factor authentication and returns necessary user information to Access, which in turn forwards that user information to federated application. As a result users can access application without any passwords. Integrate idemeum with Workspace ONE Access We are going to go through simple three steps to integrate idemeum with your WS1 Access identity environment. Request idemeum tenant Configure WS1 Access for federation Test user sign-in 1. Request idemeum tenant As a first step, reach out to idemeum team at support@idemeum.com with the request to provision idemeum tenant. Please, let us know that you will be integrating idemeum with Workspace ONE Access. We will need several things from you: Preferred tenant name - we will provision a tenant name for you based on your preferences. The tenant name will be in the form of <your company>.idemeum.com . Company logo - share your company logo with us so that we can display it on every login page request as well as in the application, when users log into your company resources. We will need the image in the png or jpeg format. WS1 Access tenant name - we will need your WS1 Access tenant name so that we can have access to your IDP metadata file, so that we can configure SAML trust on our end. As a result of tenant provisioning we will share the SAML XML metadata file URL with you that you will need to use to set up federation with WS1 Access. Tip Metadata XML file link will have the following format https://<your tenant name>/api/saml/metadata/idp.xml . 2. Configure Workspace ONE Access for federation Set idemeum as 3rd party IDP Login in to your Workspace ONE Access Tenant as an admin. Navigate to Identity & Access Management -> Identity Providers . Click Add Identity Provider -> Create SAML IDP . Add the name of your identity provider. For instance idemeum . Paste the metadata URL that you got from us when we provisioned idemeum tenant for you. Tip Metadata XML fill link will have the following format https://<your tenant name>/api/saml/metadata/idp.xml . Once the SAML metadata is processed, make sure you adjust Binding Protocol to HTTP POST . Make sure Name ID Policy in SAML Request is defined as Unspecified . Choose ALL RANGES in Network section. Create one authentication method for your IDP. In the Authentication Methods section, create name for your method and choose PasswordProtectedTransport for SAML context input field. Click Add to save IDP configuration. Apply idemeum IDP in policy configuration At this point you have configured idemeum as 3rd party identity provider for WS1 Access. What that means is that WS1 Access can now be redirecting authentication requests to idemeum using SAML protocol. What we have to do now is to apply this configuration in WS1 Access policies so that idemeum is actually used for authentication. Navigate to Identity & Access Management -> Policies . You might have different policies depending on your configuration. In this case we will be leveraging default policy set to apply idemeum configuration. We click default_access_policy_set , then click Edit . Navigate to Configuration section, and edit the rule that has Web Browser device type. This rule will be catching all authentication requests including desktop and mobile. For this rule choose Authenticate using , then select the authentication method that you created when you defined idemeum Identity Provider in the previous section. In our case that is idemeum auth . Tip You can always create a fallback rule, in case your employees are still using passwords. In that case when idemeum authentication fails for any reason, WS1 Access will fall back to using passwords to authenticate your employees. Moreover, you can create more specific authentication policy rules for iOS and Android and place them above Web Browser rule that you created. You would do that if you want to authenticate requests coming from mobile devices in a different way. But note, that idemeum supports authentication from both Mobile and Desktop, therefore going with default configuration will get you covered. 3. Test user sign in Once you are done with configuration you can quickly test the user sign-in flow. Open incognito browser window and navigate to your WS1 Access tenant URL. Once you do that you will be redirected to idemeum for login. You will see the QR code that you will need to scan with the idemeum application. Once you scan the QR code with idemeum application and approve the sign in, you will be redirected to WS1 Access application catalog. \ud83c\udf89 Congratulations! You have successfully integrated idemeum and protected your Workspace ONE deployment with passwordless multi-factor authentication. WS1 Access VMWare page \u21a9 Configure 3rd party IDP for WS1 Access \u21a9","title":"Worspace ONE Access"},{"location":"ws1access/#integrate-idemeum-with-vmware-ws1-access","text":".embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }","title":"Integrate idemeum with VMware WS1 Access"},{"location":"ws1access/#how-can-idemeum-help-secure-workspace-one-deployments","text":"idemeum integrates with Workspace ONE Access directly over SAML and provides the following services: Service Description Passwordless MFA Eliminate passwords when users access your SSO applications. No enrollment, no user sync, easy and simple.","title":"How can idemeum help secure Workspace ONE deployments?"},{"location":"ws1access/#how-does-the-integration-work","text":"idemeum integrates with Workspace ONE in minutes. As idemeum is decentralized, there is no need to synchronize users to idemeum from Active Directory, or deploy any additional servers and connectors. Simply federate your Workspace ONE appliance or SaaS tenant with idemeum over SAML protocol. Workspace ONE Access can be your primary Identity Provider or a broker. idemeum can integrate either directly with your primary identity provider, or it can integrate with Access when it is deployed as a broker. In the diagram above, we can see the deployment where WS1 Access is deployed as a primary IDP and all applications are federated directly with WS1 Access. When user is trying to authenticate to any corporate application, the sign in request is sent first to WS1 Access, and is then subsequently redirected to idemeum. idemeum performs Passwordless Multi-Factor authentication and returns necessary user information to Access, which in turn forwards that user information to federated application. As a result users can access application without any passwords.","title":"How does the integration work?"},{"location":"ws1access/#integrate-idemeum-with-workspace-one-access","text":"We are going to go through simple three steps to integrate idemeum with your WS1 Access identity environment. Request idemeum tenant Configure WS1 Access for federation Test user sign-in","title":"Integrate idemeum with Workspace ONE Access"},{"location":"ws1access/#1-request-idemeum-tenant","text":"As a first step, reach out to idemeum team at support@idemeum.com with the request to provision idemeum tenant. Please, let us know that you will be integrating idemeum with Workspace ONE Access. We will need several things from you: Preferred tenant name - we will provision a tenant name for you based on your preferences. The tenant name will be in the form of <your company>.idemeum.com . Company logo - share your company logo with us so that we can display it on every login page request as well as in the application, when users log into your company resources. We will need the image in the png or jpeg format. WS1 Access tenant name - we will need your WS1 Access tenant name so that we can have access to your IDP metadata file, so that we can configure SAML trust on our end. As a result of tenant provisioning we will share the SAML XML metadata file URL with you that you will need to use to set up federation with WS1 Access. Tip Metadata XML file link will have the following format https://<your tenant name>/api/saml/metadata/idp.xml .","title":"1. Request idemeum tenant"},{"location":"ws1access/#2-configure-workspace-one-access-for-federation","text":"","title":"2. Configure Workspace ONE Access for federation"},{"location":"ws1access/#set-idemeum-as-3rd-party-idp","text":"Login in to your Workspace ONE Access Tenant as an admin. Navigate to Identity & Access Management -> Identity Providers . Click Add Identity Provider -> Create SAML IDP . Add the name of your identity provider. For instance idemeum . Paste the metadata URL that you got from us when we provisioned idemeum tenant for you. Tip Metadata XML fill link will have the following format https://<your tenant name>/api/saml/metadata/idp.xml . Once the SAML metadata is processed, make sure you adjust Binding Protocol to HTTP POST . Make sure Name ID Policy in SAML Request is defined as Unspecified . Choose ALL RANGES in Network section. Create one authentication method for your IDP. In the Authentication Methods section, create name for your method and choose PasswordProtectedTransport for SAML context input field. Click Add to save IDP configuration.","title":"Set idemeum as 3rd party IDP"},{"location":"ws1access/#apply-idemeum-idp-in-policy-configuration","text":"At this point you have configured idemeum as 3rd party identity provider for WS1 Access. What that means is that WS1 Access can now be redirecting authentication requests to idemeum using SAML protocol. What we have to do now is to apply this configuration in WS1 Access policies so that idemeum is actually used for authentication. Navigate to Identity & Access Management -> Policies . You might have different policies depending on your configuration. In this case we will be leveraging default policy set to apply idemeum configuration. We click default_access_policy_set , then click Edit . Navigate to Configuration section, and edit the rule that has Web Browser device type. This rule will be catching all authentication requests including desktop and mobile. For this rule choose Authenticate using , then select the authentication method that you created when you defined idemeum Identity Provider in the previous section. In our case that is idemeum auth . Tip You can always create a fallback rule, in case your employees are still using passwords. In that case when idemeum authentication fails for any reason, WS1 Access will fall back to using passwords to authenticate your employees. Moreover, you can create more specific authentication policy rules for iOS and Android and place them above Web Browser rule that you created. You would do that if you want to authenticate requests coming from mobile devices in a different way. But note, that idemeum supports authentication from both Mobile and Desktop, therefore going with default configuration will get you covered.","title":"Apply idemeum IDP in policy configuration"},{"location":"ws1access/#3-test-user-sign-in","text":"Once you are done with configuration you can quickly test the user sign-in flow. Open incognito browser window and navigate to your WS1 Access tenant URL. Once you do that you will be redirected to idemeum for login. You will see the QR code that you will need to scan with the idemeum application. Once you scan the QR code with idemeum application and approve the sign in, you will be redirected to WS1 Access application catalog. \ud83c\udf89 Congratulations! You have successfully integrated idemeum and protected your Workspace ONE deployment with passwordless multi-factor authentication. WS1 Access VMWare page \u21a9 Configure 3rd party IDP for WS1 Access \u21a9","title":"3. Test user sign in"}]}